#!/bin/ruby

class Notifier
  CMD='/bin/notify-send'
  def notify(message:, critical: false)
    command = "#{CMD} 'Temperature Warner' '#{message}'"
    command += " -u 'critical'" if critical
    system(command)
  end
end

class TemperatureMonitor
  attr_reader :name
  attr_reader :threshold

  def initialize(name:, monitor_cmd:, threshold:)
    @name = name
    @monitor_cmd = monitor_cmd
    @threshold = threshold
  end

  def temperature
    `#{@monitor_cmd}`.to_i
  rescue
    -1
  end

  def triggered?
    temperature > @threshold
  end
end

class TemperatureWarner
  def initialize(monitors:, notifier:, period: 10)
    @monitors = monitors
    @notifier = notifier
    @period = period
  end

  def monitor
    @notifier.notify(message: "Monitor starting")
    loop do
      @monitors.each do |monitor|
        #puts "Checking #{monitor.name}"
        if monitor.triggered?
          message = "#{monitor.name} temperature #{monitor.temperature} exceeded threshold of #{monitor.threshold}"
          puts message
          @notifier.notify(
            message: message,
            critical: true
          )
        else
          #puts "A-OK"
        end
      end

      sleep @period
    end
  end
end

cpu_monitor = TemperatureMonitor.new(
  name: "CPU",
  monitor_cmd: "sensors | grep Tccd1 | awk '{ print $2 }' | sed 's/+//g' | sed 's/°C//g'",
  threshold: 80,
)

gpu_monitor = TemperatureMonitor.new(
  name: "GPU",
  monitor_cmd: "sensors | grep junction | awk '{ print $2 }' | sed 's/+//g' | sed 's/°C//g'",
  threshold: 85,
)

notifier = Notifier.new

warner = TemperatureWarner.new(
  monitors: [cpu_monitor, gpu_monitor],
  notifier: notifier,
)

warner.monitor
