#!/bin/ruby

class Notifier
  CMD='/bin/notify-send'
  def notify(message:, critical: false, timeout: 3)
    timeout *= 1000
    command = "#{CMD} 'Temperature Warner' \"#{message}\""
    command += " -u 'critical'" if critical
    command += " -t #{timeout}"
    system(command)
  end
end

class TemperatureMonitor
  attr_reader :name
  attr_reader :temperature
  attr_reader :threshold

  def initialize(name:, monitor_cmd:, threshold:, confirmation_checks: 0, check_period: 2)
    @name = name
    @monitor_cmd = monitor_cmd
    @threshold = threshold
    @checks = 1 + confirmation_checks
    @check_period = check_period
  end

  def update
    @temperature = `#{@monitor_cmd}`.to_i
  rescue
    @temperature = -1
  end

  def triggered?
    update

    if @temperature > @threshold
      @checks.times do |time|
        return false unless @temperature > @threshold

        sleep @check_period if @checks > 1
      end

      true
    else
      false
    end
  end
end

class TemperatureWarner
  def initialize(monitors:, notifier:, period: 10)
    @monitors = monitors
    @notifier = notifier
    @period = period
  end

  def monitor
    starting_message = build_starting_message
    @notifier.notify(
      message: starting_message,
      timeout: 5
    )
    loop do
      @monitors.each do |monitor|
        #puts "Checking #{monitor.name}"
        if monitor.triggered?
          message = "#{monitor.name}: Current temperature of #{monitor.temperature}°C exceeds threshold of #{monitor.threshold}°C"
          puts message
          @notifier.notify(
            message: message,
            critical: true,
            timeout: 9
          )
        else
          #puts "A-OK"
        end
      end

      sleep @period
    end
  end

  private

  def build_starting_message
    header = "Monitor started:"
    monitor_deets = @monitors.map { |monitor| "#{monitor.name} with threshold of #{monitor.threshold}°C" }.map { _1.prepend("  ") }
    monitor_deets.prepend(header).join("\n")
  end
end

cpu_monitor = TemperatureMonitor.new(
  name: "CPU",
  monitor_cmd: "sensors | grep Tccd1 | awk '{ print $2 }' | sed 's/+//g' | sed 's/°C//g'",
  threshold: 90,
  confirmation_checks: 5,
)

gpu_monitor = TemperatureMonitor.new(
  name: "GPU",
  monitor_cmd: "sensors | grep junction | awk '{ print $2 }' | sed 's/+//g' | sed 's/°C//g'",
  threshold: 90,
  confirmation_checks: 5,
)

notifier = Notifier.new

warner = TemperatureWarner.new(
  monitors: [cpu_monitor, gpu_monitor],
  notifier: notifier,
)

warner.monitor
